%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Tue May  7 21:16:33 2013
%%Title: /home/pawel/Projects/roboCar/diagram.sch
%%Author: (null)
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7808 0 translate 90 rotate
0.647059 0.647059 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
48000 45300 50100 45300 10 line
50100 45300 50100 48000 10 line
50100 48000 48000 48000 10 line
48000 48000 48000 45300 10 line
gsave
false false false false 260.000000 [(L293) ] 0 48000 48050 180.555557 text
grestore
gsave
false false false false 208.000000 [(CHIP INHIBIT) ] 0 48075 47650 144.444443 text
grestore
48000 47700 47700 47700 10 line
gsave
false false false false 208.000000 [(1) ] 0 47836 47750 144.444443 text
grestore
gsave
false false false false 208.000000 [(INPUT 1) ] 0 48075 47350 144.444443 text
grestore
48000 47400 47700 47400 10 line
gsave
false false false false 208.000000 [(2) ] 0 47796 47450 144.444443 text
grestore
gsave
false false false false 208.000000 [(OUTPUT 1) ] 0 48075 47050 144.444443 text
grestore
48000 47100 47700 47100 10 line
gsave
false false false false 208.000000 [(3) ] 0 47820 47150 144.444443 text
grestore
gsave
false false false false 208.000000 [(GND) ] 0 48075 46750 144.444443 text
grestore
48000 46800 47700 46800 10 line
gsave
false false false false 208.000000 [(4) ] 0 47796 46850 144.444443 text
grestore
gsave
false false false false 208.000000 [(GND) ] 0 48075 46450 144.444443 text
grestore
48000 46500 47700 46500 10 line
gsave
false false false false 208.000000 [(5) ] 0 47820 46550 144.444443 text
grestore
gsave
false false false false 208.000000 [(OUTPUT 2) ] 0 48075 46150 144.444443 text
grestore
48000 46200 47700 46200 10 line
gsave
false false false false 208.000000 [(6) ] 0 47804 46250 144.444443 text
grestore
gsave
false false false false 208.000000 [(INPUT 2) ] 0 48075 45850 144.444443 text
grestore
48000 45900 47700 45900 10 line
gsave
false false false false 208.000000 [(7) ] 0 47820 45950 144.444443 text
grestore
gsave
false false false false 208.000000 [(VC) ] 0 48075 45550 144.444443 text
grestore
48000 45600 47700 45600 10 line
gsave
false false false false 208.000000 [(8) ] 0 47812 45650 144.444443 text
grestore
gsave
false false false false 208.000000 [(VSS) ] 0 49742 47650 144.444443 text
grestore
50100 47700 50400 47700 10 line
gsave
false false false false 208.000000 [(16) ] 0 50200 47750 144.444443 text
grestore
gsave
false false false false 208.000000 [(INPUT 4) ] 0 49454 47350 144.444443 text
grestore
50100 47400 50400 47400 10 line
gsave
false false false false 208.000000 [(15) ] 0 50200 47450 144.444443 text
grestore
gsave
false false false false 208.000000 [(OUTPUT 4) ] 0 49274 47050 144.444443 text
grestore
50100 47100 50400 47100 10 line
gsave
false false false false 208.000000 [(14) ] 0 50200 47150 144.444443 text
grestore
gsave
false false false false 208.000000 [(GND) ] 0 49714 46750 144.444443 text
grestore
50100 46800 50400 46800 10 line
gsave
false false false false 208.000000 [(13) ] 0 50200 46850 144.444443 text
grestore
gsave
false false false false 208.000000 [(GND) ] 0 49714 46450 144.444443 text
grestore
50100 46500 50400 46500 10 line
gsave
false false false false 208.000000 [(12) ] 0 50200 46550 144.444443 text
grestore
gsave
false false false false 208.000000 [(OUTPUT 3) ] 0 49298 46150 144.444443 text
grestore
50100 46200 50400 46200 10 line
gsave
false false false false 208.000000 [(11) ] 0 50200 46250 144.444443 text
grestore
gsave
false false false false 208.000000 [(INPUT 3) ] 0 49478 45850 144.444443 text
grestore
50100 45900 50400 45900 10 line
gsave
false false false false 208.000000 [(10) ] 0 50200 45950 144.444443 text
grestore
gsave
false false false false 208.000000 [(CHIP INHIBIT 2) ] 0 48950 45550 144.444443 text
grestore
50100 45600 50400 45600 10 line
gsave
false false false false 208.000000 [(9) ] 0 50200 45650 144.444443 text
grestore
grestore
gsave
44000 47200 44000 47000 10 line
44000 46200 44000 46400 10 line
44000 46700 200 0 360 10 darc
43900 46873 43900 47000 10 line
43900 47000 44100 47000 10 line
44100 47000 44100 46873 10 line
43900 46526 43900 46400 10 line
43900 46400 44100 46400 10 line
44100 46400 44100 46527 10 line
grestore
gsave
false false false false 260.000000 [(Left Front) ] 0 44300 46800 180.555557 text
grestore
gsave
45600 47200 45600 47000 10 line
45600 46200 45600 46400 10 line
45600 46700 200 0 360 10 darc
45500 46873 45500 47000 10 line
45500 47000 45700 47000 10 line
45700 47000 45700 46873 10 line
45500 46526 45500 46400 10 line
45500 46400 45700 46400 10 line
45700 46400 45700 46527 10 line
grestore
gsave
false false false false 260.000000 [(Left Rear) ] 0 45900 46800 180.555557 text
grestore
gsave
53200 47200 53200 47000 10 line
53200 46200 53200 46400 10 line
53200 46700 200 0 360 10 darc
53100 46873 53100 47000 10 line
53100 47000 53300 47000 10 line
53300 47000 53300 46873 10 line
53100 46526 53100 46400 10 line
53100 46400 53300 46400 10 line
53300 46400 53300 46527 10 line
grestore
gsave
false false false false 260.000000 [(Right Front) ] 0 53500 46800 180.555557 text
grestore
gsave
54700 47200 54700 47000 10 line
54700 46200 54700 46400 10 line
54700 46700 200 0 360 10 darc
54600 46873 54600 47000 10 line
54600 47000 54800 47000 10 line
54800 47000 54800 46873 10 line
54600 46526 54600 46400 10 line
54600 46400 54800 46400 10 line
54800 46400 54800 46527 10 line
grestore
gsave
false false false false 260.000000 [(Right Rear) ] 0 55000 46800 180.555557 text
grestore
44000 46200 45600 46200 10 line
44000 47200 45600 47200 10 line
53200 47200 54700 47200 10 line
53200 46200 54700 46200 10 line
53900 46200 53900 45900 10 line
53900 45900 51500 45900 10 line
51500 45900 51500 46200 10 line
51500 46200 50400 46200 10 line
53900 47200 53900 47400 10 line
53900 47400 51500 47400 10 line
51500 47400 51500 47100 10 line
51500 47100 50400 47100 10 line
44800 47200 44800 47400 10 line
44800 47400 46500 47400 10 line
46500 47400 46500 47100 10 line
46500 47100 47700 47100 10 line
44800 46200 44800 45900 10 line
44800 45900 46500 45900 10 line
46500 45900 46500 46200 10 line
46500 46200 47700 46200 10 line
gsave
47500 48900 47500 48700 10 line
47600 49500 47400 49500 10 line
47600 49500 47600 49000 10 line
47600 49000 47500 48900 10 line
47500 48900 47400 49000 10 line
47400 49000 47400 49500 10 line
grestore
gsave
false false true false 260.000000 [(Arduino D2) ] 90 47500 49600 180.555557 text
grestore
gsave
46900 48900 46900 48700 10 line
47000 49500 46800 49500 10 line
47000 49500 47000 49000 10 line
47000 49000 46900 48900 10 line
46900 48900 46800 49000 10 line
46800 49000 46800 49500 10 line
grestore
gsave
false false true false 260.000000 [(Arduino D3) ] 90 46900 49600 180.555557 text
grestore
50500 48700 50500 47400 10 line
50500 47400 50400 47400 10 line
51000 48700 51000 45900 10 line
51000 45900 50400 45900 10 line
47500 48700 47500 47400 10 line
47500 47400 47700 47400 10 line
gsave
47400 43900 47600 43900 10 line
47600 43900 47600 43920 10 line
47600 43920 47400 43920 10 line
47400 43920 47400 43900 10 line
47500 44100 47500 43920 10 line
grestore
gsave
50400 43900 50600 43900 10 line
50600 43900 50600 43920 10 line
50600 43920 50400 43920 10 line
50400 43920 50400 43900 10 line
50500 44100 50500 43920 10 line
grestore
47700 46800 47500 46800 10 line
47500 46800 47500 44100 10 line
47700 46500 47500 46500 10 line
50400 46800 50500 46800 10 line
50500 46800 50500 44100 10 line
50400 46500 50500 46500 10 line
gsave
54840 48000 54500 48000 10 line
54940 48000 100 0 360 10 darc
grestore
gsave
false false false false 260.000000 [(+7,2V) ] 0 55150 47950 180.555557 text
grestore
gsave
53100 48900 53100 48700 10 line
53000 49500 53200 49500 10 line
53000 49500 53000 49000 10 line
53000 49000 53100 48900 10 line
53100 48900 53200 49000 10 line
53200 49000 53200 49500 10 line
grestore
gsave
false true true false 260.000000 [(Arduino Vin) ] 270 53100 49600 180.555557 text
grestore
gsave
54340 45400 54000 45400 10 line
54440 45400 100 0 360 10 darc
grestore
gsave
false false false false 260.000000 [(-7,2V) ] 0 54650 45350 180.555557 text
grestore
gsave
53400 44900 53600 44900 10 line
53600 44900 53600 44920 10 line
53600 44920 53400 44920 10 line
53400 44920 53400 44900 10 line
53500 45100 53500 44920 10 line
grestore
54000 45400 53500 45400 10 line
53500 45400 53500 45100 10 line
gsave
54200 44400 54000 44400 10 line
54800 44500 54800 44300 10 line
54800 44500 54300 44500 10 line
54300 44500 54200 44400 10 line
54200 44400 54300 44300 10 line
54300 44300 54800 44300 10 line
grestore
gsave
false false true false 260.000000 [(Arduino GND) ] 0 54900 44400 180.555557 text
grestore
gsave
53400 43900 53600 43900 10 line
53600 43900 53600 43920 10 line
53600 43920 53400 43920 10 line
53400 43920 53400 43900 10 line
53500 44100 53500 43920 10 line
grestore
54000 44400 53500 44400 10 line
53500 44400 53500 44100 10 line
gsave
52500 48900 52500 48700 10 line
52400 49500 52600 49500 10 line
52400 49500 52400 49000 10 line
52400 49000 52500 48900 10 line
52500 48900 52600 49000 10 line
52600 49000 52600 49500 10 line
grestore
gsave
false true true false 260.000000 [(Arduino 5V) ] 270 52500 49600 180.555557 text
grestore
52500 44800 52500 48700 10 line
52500 45600 50400 45600 10 line
52500 44800 47200 44800 10 line
47200 44800 47200 47700 10 line
47200 45600 47700 45600 10 line
47200 47700 47700 47700 10 line
46900 48700 46900 45900 10 line
46900 45900 47700 45900 10 line
gsave
45200 43100 45500 43100 10 line
gsave
false false false false 208.000000 [(3) ] 0 44050 43050 144.444443 text
grestore
45200 43400 45500 43400 10 line
gsave
false false false false 208.000000 [(2) ] 0 44050 43350 144.444443 text
grestore
45200 42800 45500 42800 10 line
gsave
false false false false 208.000000 [(4) ] 0 44050 42750 144.444443 text
grestore
45200 43400 44300 43400 10 line
45200 43100 44300 43100 10 line
45200 42800 44300 42800 10 line
45200 43700 45500 43700 10 line
gsave
false false false false 208.000000 [(1) ] 0 44050 43650 144.444443 text
grestore
45200 43700 44300 43700 10 line
43800 42600 44300 42600 10 line
44300 42600 44300 43900 10 line
44300 43900 43800 43900 10 line
43800 43900 43800 42600 10 line
grestore
gsave
false false false false 260.000000 [(HC-SR04) ] 0 43800 44000 180.555557 text
grestore
gsave
false false false false 260.000000 [(Vcc) ] 0 44800 43800 180.555557 text
grestore
gsave
false false false false 260.000000 [(Trig) ] 0 44800 43500 180.555557 text
grestore
gsave
false false false false 260.000000 [(Echo) ] 0 44800 43200 180.555557 text
grestore
gsave
false false false false 260.000000 [(Gnd) ] 0 44800 42900 180.555557 text
grestore
gsave
46500 44000 46500 43800 10 line
46600 44600 46400 44600 10 line
46600 44600 46600 44100 10 line
46600 44100 46500 44000 10 line
46500 44000 46400 44100 10 line
46400 44100 46400 44600 10 line
grestore
gsave
false false true false 260.000000 [(Arduino D7) ] 90 46500 44700 180.555557 text
grestore
gsave
46100 44000 46100 43800 10 line
46200 44600 46000 44600 10 line
46200 44600 46200 44100 10 line
46200 44100 46100 44000 10 line
46100 44000 46000 44100 10 line
46000 44100 46000 44600 10 line
grestore
gsave
false false true false 260.000000 [(Arduino D8) ] 90 46100 44700 180.555557 text
grestore
gsave
45700 44000 45700 43800 10 line
45800 44600 45600 44600 10 line
45800 44600 45800 44100 10 line
45800 44100 45700 44000 10 line
45700 44000 45600 44100 10 line
45600 44100 45600 44600 10 line
grestore
gsave
false false true false 260.000000 [(Arduino 5V) ] 90 45700 44700 180.555557 text
grestore
gsave
45700 42400 45900 42400 10 line
45900 42400 45900 42420 10 line
45900 42420 45700 42420 10 line
45700 42420 45700 42400 10 line
45800 42600 45800 42420 10 line
grestore
45500 42800 45800 42800 10 line
45800 42800 45800 42600 10 line
45700 43800 45700 43700 10 line
45700 43700 45500 43700 10 line
45500 43400 46100 43400 10 line
46100 43400 46100 43800 10 line
45500 43100 46500 43100 10 line
46500 43100 46500 43800 10 line
gsave
44300 48400 44450 48400 10 line
gsave
false false false false 208.000000 [(1) ] 0 44350 48450 144.444443 text
grestore
45150 48400 45300 48400 10 line
gsave
false false false false 208.000000 [(2) ] 0 45200 48450 144.444443 text
grestore
44450 48400 44625 48400 10 line
45150 48400 44975 48400 10 line
44600 48485 45000 48485 10 line
44639 48400 14 0 360 10 darc
44962 48400 14 0 360 10 darc
44770 48655 44820 48655 10 line
44770 48605 44820 48605 10 line
44770 48605 44795 48555 10 line
44820 48605 44795 48555 10 line
44795 48605 44795 48655 10 line
44795 48555 44795 48486 10 line
grestore
gsave
false false false false 260.000000 [(Start/Stop) ] 0 44700 48700 180.555557 text
grestore
gsave
45900 48900 45900 48700 10 line
46000 49500 45800 49500 10 line
46000 49500 46000 49000 10 line
46000 49000 45900 48900 10 line
45900 48900 45800 49000 10 line
45800 49000 45800 49500 10 line
grestore
gsave
false false true false 260.000000 [(Arduino D12) ] 90 45900 49600 180.555557 text
grestore
gsave
51000 48900 51000 48700 10 line
51100 49500 50900 49500 10 line
51100 49500 51100 49000 10 line
51100 49000 51000 48900 10 line
51000 48900 50900 49000 10 line
50900 49000 50900 49500 10 line
grestore
gsave
false false true false 260.000000 [(Arduino D5) ] 90 51000 49600 180.555557 text
grestore
gsave
50500 48900 50500 48700 10 line
50600 49500 50400 49500 10 line
50600 49500 50600 49000 10 line
50600 49000 50500 48900 10 line
50500 48900 50400 49000 10 line
50400 49000 50400 49500 10 line
grestore
gsave
false false true false 260.000000 [(Arduino D4) ] 90 50500 49600 180.555557 text
grestore
45300 48400 45900 48400 10 line
45900 48400 45900 48700 10 line
gsave
53800 48200 54000 48000 10 line
54000 48000 54300 48000 10 line
gsave
false false false false 208.000000 [(2) ] 0 54150 48050 144.444443 text
grestore
53800 48000 53500 48000 10 line
gsave
false false false false 208.000000 [(1) ] 0 53600 48050 144.444443 text
grestore
grestore
gsave
false false false false 260.000000 [(On/Off) ] 0 53800 48300 180.555557 text
grestore
gsave
43900 47900 44100 47900 10 line
44100 47900 44100 47920 10 line
44100 47920 43900 47920 10 line
43900 47920 43900 47900 10 line
44000 48100 44000 47920 10 line
grestore
44300 48400 44000 48400 10 line
44000 48400 44000 48100 10 line
53100 48700 53100 47700 10 line
53100 47700 50400 47700 10 line
54300 48000 54500 48000 10 line
53500 48000 53100 48000 10 line
newpath
44800 46200
25
0 360 arc
fill
newpath
44800 47200
25
0 360 arc
fill
newpath
53900 47200
25
0 360 arc
fill
newpath
53900 46200
25
0 360 arc
fill
newpath
53900 46200
25
0 360 arc
fill
newpath
53900 46200
25
0 360 arc
fill
newpath
53900 47200
25
0 360 arc
fill
newpath
53900 47200
25
0 360 arc
fill
newpath
44800 47200
25
0 360 arc
fill
newpath
44800 47200
25
0 360 arc
fill
newpath
44800 46200
25
0 360 arc
fill
newpath
44800 46200
25
0 360 arc
fill
newpath
47500 46500
25
0 360 arc
fill
newpath
47500 46500
25
0 360 arc
fill
newpath
47500 46500
25
0 360 arc
fill
newpath
50500 46500
25
0 360 arc
fill
newpath
50500 46500
25
0 360 arc
fill
newpath
50500 46500
25
0 360 arc
fill
newpath
52500 45600
25
0 360 arc
fill
newpath
52500 45600
25
0 360 arc
fill
newpath
52500 45600
25
0 360 arc
fill
newpath
47200 45600
25
0 360 arc
fill
newpath
47200 45600
25
0 360 arc
fill
newpath
47200 45600
25
0 360 arc
fill
newpath
53100 48000
25
0 360 arc
fill
newpath
53100 48000
25
0 360 arc
fill
newpath
53100 48000
25
0 360 arc
fill
showpage
%%End
